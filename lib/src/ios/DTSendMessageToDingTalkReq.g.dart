//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:ddshare_fluttify/src/ios/ios.export.g.dart';
import 'package:ddshare_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
class DTSendMessageToDingTalkReq extends DTBaseReq {
  // generate getters
  Future<DTMediaMessage> get_message() async {
    final result = await MethodChannel('com.fluttify/ddshare_fluttify')
        .invokeMethod(
            "DTSendMessageToDingTalkReq::get_message", {'refId': refId});
    kNativeObjectPool.add(DTMediaMessage()
      ..refId = result
      ..tag__ = 'ddshare_fluttify');
    return DTMediaMessage()
      ..refId = result
      ..tag__ = 'ddshare_fluttify';
  }

  Future<DTScene> get_scene() async {
    final result = await MethodChannel('com.fluttify/ddshare_fluttify')
        .invokeMethod(
            "DTSendMessageToDingTalkReq::get_scene", {'refId': refId});

    return DTScene.values[result];
  }

  // generate setters
  Future<void> set_message(DTMediaMessage message) async {
    await MethodChannel('com.fluttify/ddshare_fluttify').invokeMethod(
        'DTSendMessageToDingTalkReq::set_message',
        {'refId': refId, "message": message.refId});
  }

  Future<void> set_scene(DTScene scene) async {
    await MethodChannel('com.fluttify/ddshare_fluttify').invokeMethod(
        'DTSendMessageToDingTalkReq::set_scene',
        {'refId': refId, "scene": scene.index});
  }

// generate methods

}
