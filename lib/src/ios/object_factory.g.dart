// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:ddshare_fluttify/src/ios/ios.export.g.dart';

final _channel = MethodChannel('com.fluttify/ddshare_fluttify');

Future<DTBaseReq> createDTBaseReq() async {
  final int refId =
      await _channel.invokeMethod('ObjectFactory::createDTBaseReq');
  final object = DTBaseReq()
    ..refId = refId
    ..tag__ = 'ddshare_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<DTBaseResp> createDTBaseResp() async {
  final int refId =
      await _channel.invokeMethod('ObjectFactory::createDTBaseResp');
  final object = DTBaseResp()
    ..refId = refId
    ..tag__ = 'ddshare_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<DTAuthorizeReq> createDTAuthorizeReq() async {
  final int refId =
      await _channel.invokeMethod('ObjectFactory::createDTAuthorizeReq');
  final object = DTAuthorizeReq()
    ..refId = refId
    ..tag__ = 'ddshare_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<DTAuthorizeResp> createDTAuthorizeResp() async {
  final int refId =
      await _channel.invokeMethod('ObjectFactory::createDTAuthorizeResp');
  final object = DTAuthorizeResp()
    ..refId = refId
    ..tag__ = 'ddshare_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<DTSendMessageToDingTalkReq> createDTSendMessageToDingTalkReq() async {
  final int refId = await _channel
      .invokeMethod('ObjectFactory::createDTSendMessageToDingTalkReq');
  final object = DTSendMessageToDingTalkReq()
    ..refId = refId
    ..tag__ = 'ddshare_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<DTSendMessageToDingTalkResp> createDTSendMessageToDingTalkResp() async {
  final int refId = await _channel
      .invokeMethod('ObjectFactory::createDTSendMessageToDingTalkResp');
  final object = DTSendMessageToDingTalkResp()
    ..refId = refId
    ..tag__ = 'ddshare_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<DTMediaMessage> createDTMediaMessage() async {
  final int refId =
      await _channel.invokeMethod('ObjectFactory::createDTMediaMessage');
  final object = DTMediaMessage()
    ..refId = refId
    ..tag__ = 'ddshare_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<DTMediaTextObject> createDTMediaTextObject() async {
  final int refId =
      await _channel.invokeMethod('ObjectFactory::createDTMediaTextObject');
  final object = DTMediaTextObject()
    ..refId = refId
    ..tag__ = 'ddshare_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<DTMediaImageObject> createDTMediaImageObject() async {
  final int refId =
      await _channel.invokeMethod('ObjectFactory::createDTMediaImageObject');
  final object = DTMediaImageObject()
    ..refId = refId
    ..tag__ = 'ddshare_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<DTMediaWebObject> createDTMediaWebObject() async {
  final int refId =
      await _channel.invokeMethod('ObjectFactory::createDTMediaWebObject');
  final object = DTMediaWebObject()
    ..refId = refId
    ..tag__ = 'ddshare_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<DTMediaAlipayObject> createDTMediaAlipayObject() async {
  final int refId =
      await _channel.invokeMethod('ObjectFactory::createDTMediaAlipayObject');
  final object = DTMediaAlipayObject()
    ..refId = refId
    ..tag__ = 'ddshare_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<DTOpenAPI> createDTOpenAPI() async {
  final int refId =
      await _channel.invokeMethod('ObjectFactory::createDTOpenAPI');
  final object = DTOpenAPI()
    ..refId = refId
    ..tag__ = 'ddshare_fluttify';

  kNativeObjectPool.add(object);
  return object;
}
